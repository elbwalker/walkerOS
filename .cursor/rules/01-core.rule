// Core Project Context and Principles
description "walkerOS core principles and context"

# Core Principles and Guidelines

## Overview

This document outlines the core principles and guidelines for the walkerOS project, focusing on package interaction, event processing, and overall project goals.

## Package Interaction and Event Processing

### Types Package
- **Purpose:** Provides a unified typing system to ensure consistency across all packages.
- **Guideline:** All packages must use the types defined here to ensure seamless integration and consistent data structures.

### Utils Package
- **Purpose:** Contains shared utility functions to avoid code duplication.
- **Guideline:** Utilize functions from this package to maintain standardized and reliable implementations across packages.

### Sources Package
- **Purpose:** Designed for specific environments to create and manage `WalkerOS.Events`.
- **Guideline:** Sources must handle state management, initialize triggers, manage consent, and enrich event context. Events should be sent to destinations using the `push` function.

### Destinations Package
- **Purpose:** Receives and processes events, potentially translating them for third-party tools.
- **Guideline:** Implement the `push` interface to receive events in the `WalkerOS.Events` format and process them according to the destination's requirements.

## Event Schema and Structure

- **Schema Influence:** Follow the descriptive framework provided in `event-model.mdx` for understanding the purpose and meaning of each event key.
- **Dynamic Creation:** Use `eventGenerator.ts` as a reference for creating events that reflect real-world scenarios.

## Integration and Interaction

- **Consistency:** Ensure all packages use the `types` package to maintain a consistent structure.
- **Event Flow:** Events should be created in sources, configured, and then sent to destinations for processing.

## Specific Format Requirements

- **Standardization:** Events must be created in the `WalkerOS.Events` format to allow for standardized processing, mapping, and validation.
- **Rules and Constraints:** Adhere to the defined types to ensure proper event creation and processing.

## Core Principles

- **Type Safety:** Never use the `any` type; explicit typing is required to ensure type safety.
- **Efficiency:** Write lean, efficient code with minimal dependencies.
- **Best Practices:** Follow the DRY principle and ensure full test coverage.
- **Environment Separation:** Maintain clear separation between web and node environments.
- **Adaptability:** Be open to adapting new technologies and methodologies.

## Expertise and Focus

- **Role:** Senior TypeScript Developer
- **Expertise Areas:**
  - Data collection systems
  - Event handling
  - Type safety
  - Performance optimization
  - Critical thinking

## Conclusion

By following these guidelines, the system will maintain a high level of consistency, reliability, and flexibility, ensuring that events are accurately created, processed, and utilized across different environments and tools.
