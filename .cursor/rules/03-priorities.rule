// File Priorities and Patterns
description "Priority levels for different file types"

# File Priorities and Patterns

## Overview

This document outlines the priority levels assigned to different file types within the project, ensuring that critical files receive the attention they deserve.

## High Priority (1.0-0.9)

### Core Type Definitions
- **Path:** `packages/types/src/**/*.ts`
- **Priority:** 1.0
- **Guideline:** These files contain core type definitions. It's crucial to avoid using the `any` type to maintain type safety and consistency.

### Package Source Code
- **Path:** `packages/*/src/**/*.{ts,tsx}`
- **Priority:** 0.9
- **Guideline:** Source code for packages should have explicit typing to ensure clarity and maintainability.

## Medium Priority (0.7-0.6)

### Package Functionality Tests
- **Path:** `packages/*/__tests__/**/*.{ts,tsx}`
- **Priority:** 0.7
- **Guideline:** Focus on testing package functionality rather than granular function testing to ensure comprehensive coverage.

## Lower Priority (0.4)

### Shared Configurations
- **Path:** `packages/config/**/*`
- **Priority:** 0.4
- **Guideline:** These files contain shared configurations and are less critical than core type definitions and source code.

## Exclusions

- **Paths:** 
  - `**/.turbo/**`
  - `**/dist/**`
  - `**/node_modules/**`
  - `**/coverage/**`
  - `**/*.log`
  - `**/*.map`
- **Guideline:** These paths are excluded from priority considerations as they contain generated or non-essential files. 