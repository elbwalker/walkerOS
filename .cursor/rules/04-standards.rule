// Code and Documentation Standards
description "walkerOS coding and documentation standards"

# Overview

This document provides the coding and documentation standards to be followed across the walkerOS project, ensuring consistency and quality.

## Coding Standards

- **Type Definitions:** Start with proper type definitions from `@elbwalker/types` to ensure type safety.
- **Shared Functionality:** Check the `utils` package before implementing new shared functionality to avoid duplication.
- **Testing Focus:** Focus on package functionality in tests to ensure comprehensive coverage.
- **Implementation Preference:** Prefer vanilla implementations over external dependencies to reduce complexity.
- **Coding Patterns:** Include examples of preferred coding patterns to guide developers.

## Documentation Standards

- **README Files:** Maintain `README.md` files for package context, including purpose, usage examples, and API documentation.
- **Usage Examples:** Include usage examples in documentation to aid understanding.
- **Type Documentation:** Document type definitions thoroughly to ensure clarity.
- **Data Flow Explanation:** Explain complex data flow patterns to provide insight into system operations.
- **Documentation Styles:** Provide examples of documentation styles to maintain consistency.

## Patterns

### README Files
- **Path:** `packages/*/README.md`
- **Enforcement:** Include package purpose, usage examples, and API documentation.

### Source Files
- **Path:** `packages/*/src/**/*.ts`
- **Enforcement:** Include JSDoc comments for public APIs.
- **Validation:** No `any` types allowed to maintain type safety. 