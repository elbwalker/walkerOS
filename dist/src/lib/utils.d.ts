import { IElbwalker, Utils, Walker } from '../types';
export declare function trycatch<P extends unknown[], R>(fn: (...args: P) => R | undefined): (...args: P) => R | undefined;
export declare function randomString(): string;
export declare function getGlobalProperties(prefix: string): Walker.Properties;
export declare function splitAttribute(str: string, separator?: string): Walker.Attributes;
export declare function splitKeyVal(str: string): Walker.KeyVal;
export declare function parseAttribute(str: string): Walker.KeyVal;
export declare function getAttribute(element: Element, name: string): string;
export declare function assign(target: Walker.Properties, source?: Walker.Properties): Walker.Properties;
export declare function isArgument(event: unknown): boolean;
export declare function isVisible(element: HTMLElement): boolean;
export declare const elb: IElbwalker.Elb;
export declare function castValue(value: unknown): Walker.PropertyType;
export declare function throttle<P extends unknown[], R>(fn: (...args: P) => R | undefined, delay?: number): (...args: P) => R | undefined;
export declare function debounce<P extends unknown[], R>(fn: (...args: P) => R, wait?: number): (...args: P) => Promise<R>;
export declare function setItem(key: string, value: Walker.PropertyType, maxAgeInMinutes?: number, storage?: Utils.Storage.Type, domain?: string): void;
export declare function getItem(key: string, storage?: Utils.Storage.Type): Walker.PropertyType;
export declare function removeItem(key: string, storage?: Utils.Storage.Type): void;
export declare function isObject(obj: unknown): boolean;
export declare function isElementOrDocument(elem: unknown): boolean;
