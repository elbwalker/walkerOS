import { createCollector } from '@walkeros/collector';

{{CONTENT}}

// Create collector configuration
const config = {
  // Sources configuration
  sources: {
{{#sources}}
    {{name}}: {
      code: {{{code}}},
      config: {{{config}}},
      env: {} // Will be populated with collector.push
    },
{{/sources}}
  },
  
  // Destinations configuration  
  destinations: {
{{#destinations}}
    {{name}}: {
      code: {{{code}}},
      config: {{{config}}},
      env: {{{env}}}
    },
{{/destinations}}
  }
};

// Initialize collector and sources
let collector, elb;
let sources = {};
let initializationError = null;

// Initialize immediately
(async () => {
  try {
    // Create collector first
    const result = await createCollector({
      destinations: config.destinations
    });
    collector = result.collector;
    elb = result.elb;
    console.log('✅ WalkerOS collector initialized');
    
    // Initialize sources with collector.push as elb
    for (const [sourceName, sourceConfig] of Object.entries(config.sources)) {
      try {
        // Inject collector.push as elb in environment
        const sourceEnv = {
          ...sourceConfig.env,
          elb: collector.push
        };
        
        // Initialize source
        const source = await sourceConfig.code(sourceConfig.config, sourceEnv);
        sources[sourceName] = source;
        console.log(`✅ Source '${sourceName}' initialized`);
      } catch (sourceError) {
        console.error(`❌ Source '${sourceName}' failed:`, sourceError);
        sources[sourceName] = null;
      }
    }
    
  } catch (error) {
    initializationError = error;
    console.error('❌ WalkerOS initialization failed:', error);
  }
})();

// Export collector (always available)
export { collector, elb };

// Export source push functions by name (for deployer mapping)
{{#sources}}
export const {{name}} = async (...args) => {
  if (initializationError) {
    throw new Error(`Service initialization failed: ${initializationError.message}`);
  }
  
  if (!sources.{{name}}) {
    throw new Error(`Source '{{name}}' not available`);
  }
  
  return await sources.{{name}}.push(...args);
};

{{/sources}}

// Export source metadata for deployer introspection
export const sourceTypes = {
{{#sources}}
  {{name}}: '{{type}}',
{{/sources}}
};