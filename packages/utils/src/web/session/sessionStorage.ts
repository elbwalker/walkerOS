import {
  getId,
  getMarketingParameters,
  storageRead,
  storageWrite,
  tryCatch,
} from '../../';
import sessionStart from './sessionStart';
import type { SessionStorageConfig, SessionStorageData } from '.';

export default function sessionStorage(
  config: SessionStorageConfig = {},
  utils: {
    getId: typeof getId;
    getMarketingParameters: typeof getMarketingParameters;
    storageRead: typeof storageRead;
    storageWrite: typeof storageWrite;
    tryCatch: typeof tryCatch;
  },
): SessionStorageData {
  const start = Date.now();

  // Check for an existing session
  const existingSession: Partial<SessionStorageData> | undefined =
    utils.tryCatch((key: string) => {
      const existingSession = JSON.parse(String(utils.storageRead(key)));

      // By default it's not a new session anymore
      existingSession.isNew = false;
      existingSession.runs++;

      // Check if session is still active if length is defined
      if (
        config.length &&
        existingSession.updated + config.length * 60 * 1000 < start
      ) {
        // Session has expired
        delete existingSession.id; // Unset session ID
        existingSession.isNew = true; // Mark expired session a as new one
        existingSession.count++; // Increase session count
      }

      return existingSession;
    })('session');

  let session: SessionStorageData = Object.assign(
    // Default session data
    {
      id: '', // Will be generated by sessionStart
      start,
      updated: start,
      isNew: true,
      firstVisit: false,
      count: 1,
      runs: 1,
    },
    existingSession,
  );

  // Set config value to session status
  config.isNew = session.isNew;

  // Eventually add id, referrer and marketing parameters
  session = Object.assign(session, sessionStart(config, utils) || {});

  // @TODO Write (updated) session to storage

  return session;
}
