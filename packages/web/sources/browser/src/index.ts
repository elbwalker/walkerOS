import type { WalkerOS, Source } from '@walkerOS/core';
import type { BrowserSourceConfig, Scope } from './types';
import type {
  BrowserPushData,
  BrowserPushOptions,
  BrowserPushContext,
  BrowserPush,
} from './types/elb';
import { isString } from '@walkerOS/core';
import { load, ready, initGlobalTrigger } from './trigger';
import { destroyVisibilityTracking } from './triggerVisible';
import { initElbLayer } from './elbLayer';
import { translateToCoreCollector } from './translation';
import { sessionStart } from './session';
import { getConfig } from './config';

export * as SourceBrowser from './types';

// @TODO export examples

// Export walker utility functions
export { getAllEvents, getEvents, getGlobals } from './walker';

// Browser source init function for createSource
export const sourceBrowser: Source.Init<
  BrowserSourceConfig,
  BrowserPush
> = async (collector: WalkerOS.Collector, config: BrowserSourceConfig) => {
  // Get full configuration with defaults
  const settings = getConfig(config.settings);
  const fullConfig: BrowserSourceConfig = {
    ...config,
    settings,
  };

  const scope = settings.scope as Scope;

  // Create the source instance
  const source: Source.Instance<BrowserSourceConfig> = {
    // id: config.id!, // ID is now generated by createSource
    type: 'browser',
    config: fullConfig,
    collector,
    destroy() {
      destroyVisibilityTracking(collector);
      // Additional cleanup could be added here
    },
  };

  // Initialize ELB Layer for async command handling
  if (settings.elbLayer !== false) {
    initElbLayer(collector, {
      name: isString(settings.elbLayer) ? settings.elbLayer : 'elbLayer',
    });
  }

  // Initialize global event listeners (click, submit)
  initGlobalTrigger(collector, scope);

  // Initialize session if enabled
  if (settings.session) {
    sessionStart(collector, {}); // @TODO pass session config and add to source settings
  }

  // Setup auto-initialization via ready state
  await ready(load, collector, settings);

  // Setup cleanup for visibility tracking on collector destroy
  const originalDestroy = (
    collector as WalkerOS.Collector & { _destroy?: () => void }
  )._destroy;
  (collector as WalkerOS.Collector & { _destroy?: () => void })._destroy =
    () => {
      source.destroy?.();
      if (originalDestroy) originalDestroy();
    };

  // Create browser-specific elb function with flexible arguments
  const elb: BrowserPush = ((...args: unknown[]) => {
    // Use the translation layer to convert flexible browser inputs to collector format
    const [event, data, options, context, nested, custom] = args;
    return translateToCoreCollector(
      collector,
      event,
      data as BrowserPushData,
      options as BrowserPushOptions,
      context as BrowserPushContext,
      nested as WalkerOS.Entities,
      custom as WalkerOS.Properties,
    );
  }) as BrowserPush;

  return { source, elb };
};

export default sourceBrowser;
